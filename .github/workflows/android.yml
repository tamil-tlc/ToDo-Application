name: android ci

on:
 push:
  branches: [ "master", "dev", "qa" ]
 pull_request:
  branches: [ "master", "dev", "qa", "feature/*", "release/*" ]


jobs:
 lint:
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up java jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'
      cache: gradle

   - name: gradle excute permission
     run: chmod +x gradlew

   - name: Run lint
     run: ./gradlew lint

   - name: upload lint result  
     uses: actions/upload-artifact@v4
     with:
      name: lint-result
      path: app/build/reports/lint-results*.html


 unit-test:
  needs: [lint]
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'
      cache: gradle
   

   - name: grant execute permission 
     run: chmod +x gradlew

   - name: Run unit tests
     run: ./gradlew test

   - name: upload artifact
     uses: actions/upload-artifact@v4
     with:
      name: test result
      path: app/build/reports/tests

 build:
  needs: [lint, unit-test]
  runs-on: ubuntu-latest

  steps:
   - name: checkout the code
     uses: actions/checkout@v4

   - name: set up jdk 17
     uses: actions/setup-java@v4
     with:
      java-version: '17'
      distribution: 'temurin'
      cache: gradle
   
   - name: grant execute permission for gradlew
     run: chmod +x gradlew

   - name: build debug apk
     run: ./gradlew assembleDebug

   - name: upload debug apk
     uses: actions/upload-artifact@v4
     with:
      name: debug-apk
      path: app/build/outputs/apk/debug/*.apk

 release-version:
  needs: build
  permissions:
   contents: write
  runs-on: ubuntu-latest

  steps:
  - name: checkout the code
    uses: actions/checkout@v4

  - name: set up the java jdk17
    uses: actions/setup-java@v4
    with: 
     java-version: 17
     distribution: 'temurin'
     cache: gradle
  

  - name: Set version from build.gradle.kts
    id: bump_version
    run: |
      gradle_file="app/build.gradle.kts"
      current_version=$(grep -oP 'versionName = "\K[^"]*' "$gradle_file" || echo "1.0.0")
      IFS='.' read -r major minor patch <<< "$current_version"
      patch=$((patch + 1))
      new_version="$major.$minor.$patch"
  
      echo "Bumping version: $current_version â†’ $new_version"
    
      sed -i "s/versionName = \".*\"/versionName = \"$new_version\"/" "$gradle_file"
      build_number=$(date +%s)
      sed -i "s/versionCode = .*/versionCode = $build_number/" "$gradle_file"
   
      echo "version=$new_version" >> $GITHUB_OUTPUT
      echo "build=$build_number" >> $GITHUB_OUTPUT
      

  - name: Commit Version Changes
    run: |
      git config user.name "github-actions[bot]"
      git config user.email "github-actions[bot]@users.noreply.github.com"
      git add .
      git commit -m " Bump version to ${{ steps.bump_version.outputs.version }} (build ${{ steps.bump_version.outputs.build }}) [skip ci]" || echo "No changes"
      git push

   

  - name: Generate branch-based release notes
    id: notes
    run: |
        BRANCH_NAME="${GITHUB_REF##*/}"
        VERSION=${{ steps.bump_version.outputs.version }}
        PROJECT="${{ env.PROJECT_NAME }}"
        if [[ "$BRANCH_NAME" == "dev" ]]; then
          NOTES="Release for DEV branch\n\nProject: $PROJECT\nVersion: $VERSION\n\nCommits:\n"
          NOTES+=$(git log --pretty=format:"- %h %s (%an)" -10)
        elif [[ "$BRANCH_NAME" == "qa" ]]; then
          NOTES="QA Release\n\nProject: $PROJECT\nVersion: $VERSION"
        else
          NOTES="Production release version $VERSION"
        fi

        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo -e "$NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

  - name: Write release notes to RELEASE_NOTES.md
    run: |
        echo -e "${{ env.RELEASE_NOTES }}" > RELEASE_NOTES.md

  - name: Create GitHub Release
    uses: softprops/action-gh-release@v2
    with:
        tag_name: v${{ steps.bump_version.outputs.version }}
        name: Release v${{ steps.bump_version.outputs.version }}
        body: ${{ env.RELEASE_NOTES }}
    env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
